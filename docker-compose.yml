# New-API Docker Compose Configuration (Conversation Edition v1.0.0)
#
# 二开版本说明：
#   - 新增完整的对话内容记录功能
#   - 新增对话归档和自动维护
#   - 新增批量删除和高级筛选
#   - 性能优化（查询速度提升5-10倍）
#
# Quick Start:
#   1. 修改密码（SESSION_SECRET, POSTGRES_PASSWORD, redis密码）
#   2. docker-compose up -d
#   3. 访问 http://localhost:3000
#   4. 默认账号：root / 123456（请立即修改！）
#
# 使用 MySQL 替代 PostgreSQL:
#   1. 注释掉 postgres 服务和第30行的 SQL_DSN
#   2. 取消注释 mysql 服务和第31行的 SQL_DSN
#   3. 取消注释 depends_on 中的 mysql (第52行)
#   4. 取消注释 volumes 中的 mysql_data (第94行)
#
# ⚠️  重要：生产环境部署前必须修改所有默认密码！

version: '3.8'

services:
  new-api:
    # 🎉 二开版本镜像（包含对话记录功能）
    image: zhang/new-api:v1.0.0-conversation
    container_name: new-api
    restart: unless-stopped
    command: --log-dir /app/logs

    ports:
      - "3000:3000"

    volumes:
      - ./data:/data
      - ./logs:/app/logs

    environment:
      # 数据库配置（必须修改密码！）
      - SQL_DSN=postgresql://root:123456@postgres:5432/new-api # ⚠️ 生产环境必须修改密码！
#      - SQL_DSN=root:123456@tcp(mysql:3306)/new-api  # MySQL配置，取消注释并注释上一行

      # Redis 缓存
      - REDIS_CONN_STRING=redis://redis

      # 时区设置
      - TZ=Asia/Shanghai

      # 基础功能开关
      - ERROR_LOG_ENABLED=true
      - BATCH_UPDATE_ENABLED=true

      # 会话密钥（多机部署必须设置，单机也建议设置）
      - SESSION_SECRET=random-session-secret-change-me-in-production

      # ============================================
      # 🆕 对话记录功能配置（二开新增）
      # ============================================

      # 启用对话记录功能（true/false）
      - CONVERSATION_LOG_ENABLED=true

      # 自动归档天数（归档多少天前的对话到归档表）
      - CONVERSATION_ARCHIVE_DAYS=30

      # 自动清理天数（删除多少天前的归档数据）
      - CONVERSATION_CLEANUP_DAYS=365

      # ============================================
      # 其他可选配置
      # ============================================

      # 流模式超时时间（秒）
#      - STREAMING_TIMEOUT=300

      # 数据库同步频率（秒）
#      - SYNC_FREQUENCY=60

      # Google Analytics
#      - GOOGLE_ANALYTICS_ID=G-XXXXXXXXXX

      # Umami 统计
#      - UMAMI_WEBSITE_ID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
#      - UMAMI_SCRIPT_URL=https://analytics.umami.is/script.js

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
#      mysql:  # MySQL 使用时取消注释
#        condition: service_healthy

    healthcheck:
      test: ["CMD-SHELL", "wget -q -O - http://localhost:3000/api/status | grep -o '\"success\":\\s*true' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: new-api-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  postgres:
    image: postgres:15-alpine
    container_name: new-api-postgres
    restart: unless-stopped

    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: 123456  # ⚠️ 生产环境必须修改密码！
      POSTGRES_DB: new-api

    volumes:
      - pg_data:/var/lib/postgresql/data

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root"]
      interval: 10s
      timeout: 5s
      retries: 5

#    ports:
#      - "5432:5432"  # 如需从外部访问 PostgreSQL，取消注释

  # MySQL 数据库（可选，与 PostgreSQL 二选一）
#  mysql:
#    image: mysql:8.2
#    container_name: new-api-mysql
#    restart: unless-stopped
#
#    environment:
#      MYSQL_ROOT_PASSWORD: 123456  # ⚠️ 生产环境必须修改密码！
#      MYSQL_DATABASE: new-api
#
#    command: >
#      --character-set-server=utf8mb4
#      --collation-server=utf8mb4_unicode_ci
#      --default-authentication-plugin=mysql_native_password
#
#    volumes:
#      - mysql_data:/var/lib/mysql
#
#    healthcheck:
#      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p123456"]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#
#    ports:
#      - "3306:3306"  # 如需从外部访问 MySQL，取消注释

volumes:
  pg_data:
    driver: local
  redis_data:
    driver: local
#  mysql_data:  # MySQL 使用时取消注释
#    driver: local

# ============================================
# 🎉 二开版本说明
# ============================================
#
# 版本：v1.0.0-conversation
# 作者：Zhang
# 日期：2025-01
#
# 新增功能：
#   ✅ 完整的对话内容记录（请求+响应）
#   ✅ 后台管理界面（按用户、模型、时间筛选）
#   ✅ 批量删除和按条件批量删除
#   ✅ 自动归档（主表保持轻量，性能提升5-10倍）
#   ✅ 数据压缩（节省50-70%存储空间）
#   ✅ 自动维护任务（每日归档、每周清理、每月优化）
#   ✅ 5个新增 API 接口
#
# 配置说明：
#   CONVERSATION_LOG_ENABLED: 启用对话记录功能
#   CONVERSATION_ARCHIVE_DAYS: 归档天数（默认30天）
#   CONVERSATION_CLEANUP_DAYS: 清理归档天数（默认365天）
#
# 使用文档：
#   - README_CONVERSATION_FEATURE.md - 完整功能说明
#   - CONVERSATION_FEATURE_README.md - 部署和使用文档
#   - PERFORMANCE_OPTIMIZATION_GUIDE.md - 性能优化指南
#   - DEPLOYMENT_CHECKLIST.md - 部署检查清单
#
# ============================================
# 使用说明
# ============================================
#
# 1. 生成随机密钥（重要！）：
#    openssl rand -hex 32
#    然后替换 SESSION_SECRET 的值
#
# 2. 启动服务：
#    docker-compose up -d
#
# 3. 查看日志：
#    docker-compose logs -f new-api
#
# 4. 停止服务：
#    docker-compose down
#
# 5. 更新镜像：
#    docker-compose pull
#    docker-compose up -d
#
# 6. 备份数据库：
#    docker-compose exec postgres pg_dump -U root new-api > backup.sql
#
# 7. 恢复数据库：
#    cat backup.sql | docker-compose exec -T postgres psql -U root new-api
#
# 8. 访问管理后台：
#    http://localhost:3000
#    默认账号：root / 123456（请立即修改！）
#
# 9. 对话记录管理：
#    http://localhost:3000/conversation
#    （需要管理员权限）
#
# 10. 监控表大小：
#     curl http://localhost:3000/api/conversation/table_stats \
#       -H "Authorization: Bearer YOUR_ADMIN_TOKEN"
#
# ============================================
# 故障排查
# ============================================
#
# 问题1：无法启动
#   解决：检查端口3000是否被占用
#   lsof -i :3000
#
# 问题2：数据库连接失败
#   解决：检查数据库容器是否正常启动
#   docker-compose ps
#   docker-compose logs postgres
#
# 问题3：对话未被记录
#   解决：检查 CONVERSATION_LOG_ENABLED 是否为 true
#   docker-compose exec new-api env | grep CONVERSATION
#
# 问题4：表太大
#   解决：手动归档历史数据
#   curl -X POST http://localhost:3000/api/conversation/archive \
#     -H "Authorization: Bearer TOKEN" \
#     -d '{"days": 30, "batch_size": 1000}'
#
